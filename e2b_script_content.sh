#!/bin/bash

# Exit immediately if a command exits with a non-zero status.
set -e

# --- Expected Environment Variables ---
# GEMINI_API_KEY
# TASK_DESCRIPTION
# GITHUB_REPO_URL (e.g., https://github.com/user/repo)
# GITHUB_API_KEY

# --- Log inputs (excluding API keys for security in logs) ---
echo "E2B Script Started"
echo "Task Description: $TASK_DESCRIPTION"
echo "GitHub Repo URL: $GITHUB_REPO_URL"

# --- Validate inputs ---
if [ -z "$GEMINI_API_KEY" ]; then echo "Error: GEMINI_API_KEY is not set." >&2; exit 1; fi
if [ -z "$TASK_DESCRIPTION" ]; then echo "Error: TASK_DESCRIPTION is not set." >&2; exit 1; fi
if [ -z "$GITHUB_REPO_URL" ]; then echo "Error: GITHUB_REPO_URL is not set." >&2; exit 1; fi
if [ -z "$GITHUB_API_KEY" ]; then echo "Error: GITHUB_API_KEY is not set." >&2; exit 1; fi

# --- Gemini Interaction ---
echo "Generating content with Gemini..."
GEMINI_API_ENDPOINT="https://generativelanguage.googleapis.com/v1beta/models/gemini-1.5-flash:generateContent?key=${GEMINI_API_KEY}"
REQUEST_PAYLOAD=$(cat <<EOF
{
  "contents": [{
    "parts":[{
      "text": "Generate a short, dummy text file content based on the following task: ${TASK_DESCRIPTION}. Keep it under 50 words."
    }]
  }]
}
EOF
)

# Make the cURL request
# Use -s for silent, -S to show errors, -f to fail silently on server errors (set -e handles this)
GEMINI_RESPONSE=$(curl -s -S -X POST -H "Content-Type: application/json" -d "$REQUEST_PAYLOAD" "$GEMINI_API_ENDPOINT")

# Check if curl command failed (e.g., network issue, bad key)
if [ $? -ne 0 ]; then
    echo "Error: Gemini API request failed." >&2
    echo "Response: $GEMINI_RESPONSE" >&2
    exit 1
fi

# Extract text content using jq if available, otherwise a simpler grep/sed
# Assuming jq is available in the E2B Node.js environment. If not, this needs adjustment.
GENERATED_TEXT=$(echo "$GEMINI_RESPONSE" | jq -r '.candidates[0].content.parts[0].text')

if [ -z "$GENERATED_TEXT" ] || [ "$GENERATED_TEXT" == "null" ]; then
    echo "Error: Could not extract generated text from Gemini response." >&2
    echo "Gemini Response: $GEMINI_RESPONSE" >&2
    exit 1
fi
echo "Gemini content generated successfully."
echo "Generated Text (first 50 chars): $(echo "$GENERATED_TEXT" | cut -c 1-50)..."

# --- GitHub Operations ---
echo "Performing GitHub operations..."
# Parse GITHUB_REPO_URL to get USER/REPO format for gh cli
REPO_PATH=$(echo "$GITHUB_REPO_URL" | sed 's|https?://github.com/||') # Removes http(s)://github.com/

# Configure git
git config --global user.email "ai-agent@example.com"
git config --global user.name "AI Agent"

# Authenticate gh CLI
echo "$GITHUB_API_KEY" | gh auth login --with-token
gh auth status

# Clone the repository
echo "Cloning repository $REPO_PATH..."
gh repo clone "$REPO_PATH" work_dir
cd work_dir

# Create a new branch
BRANCH_NAME="ai-generated-pr-$(date +%s)"
git checkout -b "$BRANCH_NAME"
echo "Created and switched to branch $BRANCH_NAME."

# Create a new file with Gemini content
FILENAME="AI_GENERATED_CONTENT_$(echo "$TASK_DESCRIPTION" | tr -dc '[:alnum:]
' | tr '[:upper:]' '[:lower:]' | cut -c 1-20).md"
echo "$GENERATED_TEXT" > "$FILENAME"
echo "Created file $FILENAME with Gemini content."

# Add, commit, and push
git add "$FILENAME"
git commit -m "AI Task: $TASK_DESCRIPTION"
echo "Committed changes."
git push -u origin "$BRANCH_NAME"
echo "Pushed changes to origin."

# Create Pull Request
echo "Creating pull request..."
PR_TITLE="AI Task: $TASK_DESCRIPTION"
PR_BODY="Pull request generated by AI based on the task: '${TASK_DESCRIPTION}'. Content from Gemini."

# gh pr create will output the PR URL on success
PR_URL=$(gh pr create --title "$PR_TITLE" --body "$PR_BODY" --fill)

if [ $? -ne 0 ]; then
    echo "Error: Failed to create pull request." >&2
    # gh often prints useful error messages to stderr, which should be captured by E2B
    exit 1
fi

echo "Pull request created successfully!"

# --- Output ---
# The last line printed to stdout should be the PR URL
echo "$PR_URL"

exit 0
